name: Build Windows and Android

on:
  workflow_dispatch:

jobs:
  # 编译Windows版本
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      # 签出代码
      - uses: actions/checkout@v4
      
      # 设置Flutter环境
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.x"
          cache: true
      
      # 启用Windows Desktop支持
      - name: Enable Flutter Desktop
        run: flutter config --enable-windows-desktop
      
      # 更新Flutter的packages
      - name: Restore Packages
        run: |
          cd simple_live_app
          flutter pub get
      
      # 设置flutter_distributor环境
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor
      
      # 编译Windows ZIP和MSIX
      - name: Build Windows
        run: |
          cd simple_live_app
          flutter_distributor package --platform windows --targets msix,zip --skip-clean
      
      # 上传Windows包至Artifacts
      - name: Upload Windows APP to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            simple_live_app/build/dist/*/*.msix
            simple_live_app/build/dist/*/*.zip
      
      # 完成
      - run: echo "🍏 Windows build job's status is ${{ job.status }}."

  # 编译Android App版本
  build-android:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 签出代码
      - uses: actions/checkout@v4
      
      # 设置JAVA环境
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: "17"
          cache: "gradle"
      
      # 设置Flutter环境
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.x"
          cache: true
      
      # 更新Flutter的packages
      - name: Restore Packages
        run: |
          cd simple_live_app
          flutter pub get
      
      # 编译APK (不签名，用于测试)
      - name: Build APK
        run: |
          cd simple_live_app
          flutter build apk --release --split-per-abi
      
      # 上传APK至Artifacts
      - name: Upload APK to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: |
            simple_live_app/build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            simple_live_app/build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            simple_live_app/build/app/outputs/flutter-apk/app-x86_64-release.apk
      
      # 完成
      - run: echo "🍏 Android build job's status is ${{ job.status }}."

  # 总结报告
  build-summary:
    runs-on: ubuntu-latest
    needs: [build-windows, build-android]
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "## 🚀 编译完成报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📱 Android应用" >> $GITHUB_STEP_SUMMARY
          echo "- **状态**: ${{ needs.build-android.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **构建产物**: APK文件 (多架构)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🖥️ Windows应用" >> $GITHUB_STEP_SUMMARY
          echo "- **状态**: ${{ needs.build-windows.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **构建产物**: MSIX和ZIP文件" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 下载说明" >> $GITHUB_STEP_SUMMARY
          echo "所有构建产物已上传至Artifacts，可在Actions页面下载。" >> $GITHUB_STEP_SUMMARY